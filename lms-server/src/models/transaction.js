import mongoose from "mongoose";

const transactionSchema = new mongoose.Schema(
  {
    // Our internal unique identifier for this transaction, generated by uuidv4 on the backend.
    // This will be sent as 'product_id' to eSewa and used to track the transaction.
    transactionUuid: {
      type: String,
      required: true,
      unique: true, // Ensure each transaction has a unique ID
      index: true,  // For faster lookups
    },
    // The amount of the fine paid in this transaction
    amount: {
      type: Number,
      required: true,
      min: 0, // Amount should not be negative
    },
    // Reference to the User (Member) who made this payment
    // Assuming you have a 'User' model in your Mongoose setup
    userId: {
      type: mongoose.Schema.Types.ObjectId, 
      ref: 'User', 
      required: true,
      index: true, // For faster lookups by user
    },
    // An array of Borrow IDs that this payment covers
    // This is crucial for knowing exactly which fines were paid.
    borrowIds: [
      {
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'Borrow', 
        required: true,
      }
    ],
    // eSewa's own transaction reference ID, provided in the callback.
    // This is essential for server-to-server verification and auditing.
    esewaRefId: {
      type: String,
      unique: true,
      sparse: true, // Allows multiple documents to have null/undefined values, but unique for non-null
    },
    // Current status of the transaction in your system
    status: {
      type: String,
      required: true,
      enum: ["PENDING", "COMPLETE", "FAILED", "REFUNDED", "INITIATED"], 
      default: "INITIATED", 
    },
    // Optional: Payment gateway used (useful if you expand to other gateways)
    paymentGateway: {
      type: String,
      enum: ["eSewa"], // Can add "Khalti", "Stripe" etc. later
      default: "eSewa",
    },
    // Timestamp for when the payment was successfully verified by eSewa
    verifiedAt: {
      type: Date,
    },
    // Optional: Any additional data from eSewa callback that you might want to store
    esewaCallbackData: {
      type: Object, // Store the raw decoded data from eSewa's 'data' parameter
    }
  },
  {
    timestamps: true, // Adds createdAt and updatedAt fields automatically
  }
);

// Create the Transaction model from the schema
const Transaction = mongoose.model("Transaction", transactionSchema);

export default Transaction;
